apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'walle'

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.hbtc.wallet"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "bh_wallet"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        signingConfig signingConfigs.debug
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }


    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("${STORE_FILE}")
            storePassword "${STORE_PWD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PWD}"
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            storeFile file("${STORE_FILE}")
            storePassword "${STORE_PWD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PWD}"
            v1SigningEnabled true
            v2SigningEnabled true
        }

        alpha {
            storeFile file("${STORE_FILE}")
            storePassword "${STORE_PWD}"
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PWD}"
            v1SigningEnabled true
            v2SigningEnabled true
        }

    }

    buildTypes {

        debug {
            //不要忘了要在release的时候加入我么的签名配置信息
            signingConfig signingConfigs.debug
            debuggable true
            //buildConfigField("String", "API_HOST_URL", "\"${API_HOST_DEBUG_URL}\"")
            //不显示Log　Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources false
            //启用混淆
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //这里要加上，否则debug包会出问题,后面两个为可选，x86建议加上不然部分模拟器回报错
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }

        }

        release {
            //不要忘了要在release的时候加入我么的签名配置信息
            signingConfig signingConfigs.release
            //buildConfigField("String", "API_HOST_URL", "\"${API_HOST_RELEASE_URL}\"")
            //不显示Log　Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //启用混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //这里其实我觉可以直接是用"armeabi-v7a"，但国内大多使用的都是"armeabi"
                abiFilters  'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

            }
        }

        alpha.initWith(release)
        alpha  {
            //不要忘了要在release的时候加入我么的签名配置信息
            signingConfig signingConfigs.alpha
            //不显示Log　Zipalign优化
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //启用混淆
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //这里其实我觉可以直接是用"armeabi-v7a"，但国内大多使用的都是"armeabi"
                abiFilters  'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

            }
            matchingFallbacks = ['alpha', 'debug', 'release']
            //matchingFallbacks = ['release', 'debug']
            //buildConfigField 'String', 'APPLICATIOIN_ID', "\"$application_id\""
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "release") {
                outputFileName = "${variant.productFlavors[0].name}_Release_V${defaultConfig.versionName}_${releaseTime()}_app.apk"
            } else if (variant.buildType.name == "debug") {
                outputFileName = "${variant.productFlavors[0].name}_Debug_V${defaultConfig.versionName}_${releaseTime()}_app.apk"
            } else if(variant.buildType.name == "alpha") {
                outputFileName = "${variant.productFlavors[0].name}_Alpha_V${defaultConfig.versionName}_${releaseTime()}_app.apk"
            }

        }
    }

    dataBinding {
        enabled true
    }

    /**
     * 这前用上面multiDexEnabled true时，
     * 突然在5.0以下的手机上跑不起来，
     * 改成下面这种写法就可以了。
     */
    dexOptions {
        jumboMode true
    }

    compileOptions {
        encoding = "UTF-8"
        incremental false
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    productFlavors {
        bh_wallet {
            applicationId "com.hbtc.wallet"
            manifestPlaceholders = [APPLICATION_ID: application_id]
            //resConfigs("en","xxhdpi")
        }
    }

    configurations {
        //这里要排除到这个包，这个包会与 com.google.guava 冲突，导致编译不过
        //all*.exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha01'
    implementation 'androidx.appcompat:appcompat-resources:1.2.0-alpha01'


    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    //implementation 'com.android.support:design:27.1.1'
    //implementation 'com.google.guava:guava:27.1-android'

    //wallet打包
    implementation 'com.meituan.android.walle:library:1.1.6'

    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'

    // 调试工具
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    //toast提示
    //implementation 'com.hjq:toast:8.0'

    implementation 'org.greenrobot:eventbus:3.2.0'
    //blockcanary
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'

    //implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    //this way you only enable BlockCanary in debug package
    //debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    //releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

    implementation 'com.alibaba:arouter-api:1.5.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.1'

    /*implementation ('androidx.work:work-runtime:2.1.0'){
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    implementation 'androidx.work:work-rxjava2:2.1.0'*/
    //implementation 'androidx.work:work-runtime-ktx:2.3.1'
    //api "androidx.work:work-runtime:$work_version"

    //bugly
    implementation 'com.tencent.bugly:crashreport:latest.release'

    implementation project(path: ':BH_Common')
    implementation project(path: ':BH_Market')
    implementation project(path: ':BH_Mnemonic')
    implementation project(path: ':BH_Balance')
    implementation project(path: ':BH_Main2')

}

/**
 *
 * @param flavorName
 * @return
 */
Properties loadConfigProperties(flavorName){
    def configProperties = new Properties();
    println("loadConfigProperties++++++++++++++  " + "${flavorName}.properties")
    configProperties.load(new FileInputStream("${flavorName}.properties"))
    return configProperties;
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    //apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    apkFileNameFormat = '${channel}-${buildType}-v${versionName}-${versionCode}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}
